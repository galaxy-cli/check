#!/bin/bash
#   ___| |__   ___  ___| | __
#  / __| '_ \ / _ \/ __| |/ /
# | (__| | | |  __/ (__|   <
#  \___|_| |_|\___|\___|_|\_\
# https://github.com/galaxy-cli/check
# check - Quickly spell-check and correct text from the terminal with aspell

# Checks to see if `xsel` is installed
set -e

check_xsel() {
    if ! command -v xsel &> /dev/null; then
        echo "Error: 'xsel' is required but not installed."
        read -p "Would you like to install it now? (y/n) " answer
        case "$answer" in
            y|Y|yes|YES)
                echo "Attempting to install xsel..."
                if command -v apt-get &> /dev/null; then
                    sudo apt-get update && sudo apt-get install -y xsel
                else
                    echo "Package manager not detected. Please install 'xsel' manually."
                    exit 1
                fi
                ;;
            *)
                echo "xsel is required to run this script. Exiting."
                exit 1
                ;;
        esac
    fi
}

print_usage() {
    cat <<EOF
USAGE
  check		   Spell-checks user input
  check [FILE]	   Spell-checks [FILE]
  check --clip     Spell-checks clipboard contents
  check --cursor   Spell-checks highlight text

FLAGS
  --clip        Use clipboard to spell check (xsel)
  --cursor	Uses cursor hightlighted text to spell check
EOF
}

# Temp file to store inputs
temp=$(mktemp)

input_from_file() {
    local file="$1"
    echo "----- BEFORE -----"
    cat "$file" > "$temp"
    cat "$file"
}

input_from_clipboard() {
        xsel --clipboard > "$temp"
	if [[ ! -s "$temp" ]]; then
        	echo "No text found in clipboard."
        	exit 1
	fi
	echo "----- BEFORE -----"
	xsel --clipboard
	printf "\n"

}

input_from_primary() {
        xsel --primary > "$temp"
	if [[ ! -s "$temp" ]]; then
        	echo "No text found in X11 primary selection (highlighted text)."
        	exit 1
	fi
        echo "----- BEFORE -----"
        xsel --primary
        printf "\n"
}

input_from_user() {
	echo "----- BEFORE -----"
        read -r user_input
        echo "$user_input" > "$temp"
}

case "$1" in
    --clip)
        input_from_clipboard
        ;;
    --cursor)
        input_from_primary
        ;;
    --help)
        print_usage
        exit 0
        ;;
    "")
        input_from_user
        ;;
    *)
        input_from_file "$1"
        ;;
esac

# Spell-checks the text
aspell -c "$temp"

# Outputs the corrected input
echo "----- AFTER ------"
cat "$temp"
