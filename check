#!/bin/bash
#   ___| |__   ___  ___| | __
#  / __| '_ \ / _ \/ __| |/ /
# | (__| | | |  __/ (__|   <
#  \___|_| |_|\___|\___|_|\_\
# check - Quickly spell-check and correct text from the terminal with aspell
# Author: galaxy-cli
# Project: https://github.com/galaxy-cli/check

# Checks to see if `xsel` is installed
set -e

temp=$(mktemp)
trap 'rm -f "$temp"' EXIT

check_command() {
    local cmd="$1"
    local pkg="$2"
    if ! command -v "$cmd" &> /dev/null; then
        echo "Error: '$cmd' is required but not installed."
        if command -v apt-get &> /dev/null; then
            read -rp "Install $pkg now? (y/n) " ans
            case "${ans,,}" in
                y|yes) sudo apt-get update && sudo apt-get install -y "$pkg" ;;
                *) echo "$cmd is required. Exiting." ; exit 1 ;;
            esac
        else
            echo "Please install '$pkg' manually."
            exit 1
        fi
    fi
}

check_command xsel xsel
check_command aspell aspell


print_usage() {
    cat <<EOF
USAGE
  check
  check FILE
  check --clip
  check --cursor
FLAGS
  --clip        Use clipboard to spell check (xsel)
  --cursor	Uses cursor hightlighted text to spell check
EOF
}

# Temp file to store inputs
temp=$(mktemp)
trap 'rm -f "$temp"' EXIT

input_from_file() {
    local file="$1"
    echo "----- BEFORE -----"
    cat "$file" > "$temp"
    cat "$file"
}

input_from_clipboard() {
	xsel --clipboard > "$temp"
	if [[ ! -s "$temp" ]]; then
        	echo "No text found in clipboard."
        	exit 1
	fi
	echo "----- BEFORE -----"
	cat "$temp"
	echo
}

input_from_primary() {
	xsel --primary > "$temp"
	if [[ ! -s "$temp" ]]; then
        	echo "No text found in X11 primary selection (highlighted text)."
        	exit 1
	fi
        echo "----- BEFORE -----"
        cat "$temp"
	echo
}

input_from_user() {
	echo "----- BEFORE -----"
        read -r user_input
        echo "$user_input" > "$temp"
}

case "$1" in
    --clip)
        input_from_clipboard
        ;;
    --cursor)
        input_from_primary
        ;;
    --help)
        print_usage
        exit 0
        ;;
    "")
        input_from_user
        ;;
    *)
        input_from_file "$1"
        ;;
esac

# Spell-checks the text
aspell -c "$temp"

# Outputs the corrected input
echo "----- AFTER ------"
cat "$temp"
printf "\n"
